{"version":3,"sources":["TodoInput.js","TodoItem.js","UserDialog.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","e","key","this","props","onSubmit","onChange","react_default","a","createElement","type","value","content","className","onKeyPress","submit","bind","changeTitle","Component","TodoItem","onToggle","todo","onDelete","checked","status","toggle","title","onClick","delete","UserDialog","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","selected","setState","target","signUpForm","signInForm","switch","App","newTodo","todoList","event","push","id","idMaker","deleted","_this2","todos","filter","elem","map","index","TodoItem_TodoItem","TodoInput_TodoInput","addTodo","UserDialog_UserDialog","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc7bdc53.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './TodoInput.css';\r\n\r\nexport default class TodoInput extends Component{\r\n  submit(e){\r\n    if(e.key === 'Enter'){\r\n      this.props.onSubmit(e)\r\n    }\r\n  }\r\n  changeTitle(e){\r\n    this.props.onChange(e)\r\n  }\r\n  render(){\r\n    return(\r\n      <input type=\"text\" value={this.props.content}\r\n        className=\"TodoInput\"\r\n        onKeyPress={this.submit.bind(this)}\r\n        onChange={this.changeTitle.bind(this)}/>\r\n    )\r\n  }\r\n}","import React, {Component} from 'react';\r\nimport './TodoItem.css';\r\n\r\nexport default class TodoItem extends Component{\r\n  toggle(e){\r\n    this.props.onToggle(e,this.props.todo)\r\n  }\r\n  delete(e){\r\n    this.props.onDelete(e,this.props.todo)\r\n  }\r\n  render(){\r\n    return (\r\n      <div className=\"TodoItem\">\r\n        <div className=\"TitleWrapper\">\r\n          <input type=\"checkbox\" checked={this.props.todo.status === 'completed'}\r\n            onChange={this.toggle.bind(this)}/>\r\n          {this.props.todo.title}\r\n        </div>\r\n        <button onClick={this.delete.bind(this)}>删除</button>\r\n      </div>\r\n    )\r\n  }\r\n}","import React, {Component} from 'react';\r\nimport './UserDialog.css';\r\n\r\nexport default class UserDialog extends Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      selected: 'signUp'\r\n    }\r\n  }\r\n  switch(e){\r\n    this.setState({\r\n      selected : e.target.value\r\n    })\r\n  }\r\n  render(){\r\n    let signUpForm = (\r\n      <form className=\"signUp\"> {/* 注册*/}\r\n      <div className=\"row\">\r\n        <label>用户名</label> \r\n        <input type=\"text\"/>\r\n      </div>\r\n      <div className=\"row\">\r\n        <label>密码</label>\r\n        <input type=\"password\"/>\r\n      </div>\r\n      <div className=\"row actions\">\r\n        <button type=\"submit\">注册</button>\r\n      </div>\r\n    </form>\r\n    )\r\n    let signInForm = (\r\n      <form className=\"signIn\"> {/* 登录*/}\r\n      <div className=\"row\">\r\n        <label>用户名</label>\r\n        <input type=\"text\"/>\r\n      </div>\r\n      <div className=\"row\">\r\n        <label>密码</label>\r\n        <input type=\"password\"/>\r\n      </div>\r\n      <div className=\"row actions\">\r\n        <button type=\"submit\">登录</button>\r\n      </div>\r\n    </form>\r\n    )\r\n    return (\r\n      <div className=\"UserDialog-Wrapper\">\r\n        <div className=\"UserDialog\">\r\n          <nav onChange={this.switch.bind(this)}>\r\n            <label><input type=\"radio\" value=\"signUp\" checked={this.state.selected === 'signUp'}/>注册</label>\r\n            <label><input type=\"radio\" value=\"signIn\" checked={this.state.selected === 'signIn'}/>登录</label>\r\n          </nav>\r\n          <div className=\"panes\">\r\n            {this.state.selected === 'signUp' ? signUpForm : null}\r\n            {this.state.selected === 'signIn' ? signInForm : null}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport 'normalize.css';\nimport './reset.css';\nimport TodoInput from './TodoInput';\nimport TodoItem from './TodoItem';\nimport UserDialog from './UserDialog';\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      newTodo: '',\n      todoList: []\n    }\n  }\n  addTodo(event){\n    this.state.todoList.push({\n      id: idMaker(),\n      title: event.target.value,\n      status: '',\n      deleted: false\n    })\n    this.setState({\n      newTodo: '',\n      todoList: this.state.todoList\n    })\n  }\n  changeTitle(event){\n    this.setState({\n      newTodo: event.target.value,\n      todoList: this.state.todoList\n    })\n  }\n  toggle(event,todo){\n    todo.status = todo.status === 'completed' ? '' : 'completed'\n    this.setState(this.state)\n  }\n  delete(event,todo){\n    todo.deleted = true\n    this.setState(this.state)\n  }\n  render(){\n    let todos = this.state.todoList\n      .filter((elem) => !elem.deleted)\n      .map((elem, index) => {\n      //return <li>{todo.title}</li>\n      return (\n        <li key={index}>\n          <TodoItem todo={elem} onToggle={this.toggle.bind(this)}\n            onDelete={this.delete.bind(this)}/>\n        </li>\n      )\n    })\n    return (\n      <div className=\"App\">\n        <h1>我的待办</h1>\n        <div className=\"InputWrapper\">\n          <TodoInput content={this.state.newTodo}\n            onSubmit={this.addTodo.bind(this)}\n            onChange={this.changeTitle.bind(this)}/>\n        </div>\n        <ol className=\"todoList\">\n          {todos}\n        </ol>\n        <UserDialog/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n\nlet id = 0\n\nfunction idMaker(){\n  id += 1\n  return id\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}